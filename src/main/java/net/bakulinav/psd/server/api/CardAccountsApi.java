/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.3.4).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package net.bakulinav.psd.server.api;

import net.bakulinav.psd.server.model.CardAccountDetails;
import net.bakulinav.psd.server.model.CardAccountList;
import net.bakulinav.psd.server.model.CardAccountsTransactionsResponse200;
import net.bakulinav.psd.server.model.Error400NGAIS;
import net.bakulinav.psd.server.model.Error401NGAIS;
import net.bakulinav.psd.server.model.Error403NGAIS;
import net.bakulinav.psd.server.model.Error404NGAIS;
import net.bakulinav.psd.server.model.Error405NGAIS;
import net.bakulinav.psd.server.model.Error406NGAIS;
import net.bakulinav.psd.server.model.Error429NGAIS;
import java.time.LocalDate;
import net.bakulinav.psd.server.model.ReadCardAccountBalanceResponse200;
import java.util.UUID;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2019-01-30T10:06:52.317+04:00[Europe/Saratov]")

@Validated
@Api(value = "card-accounts", description = "the card-accounts API")
public interface CardAccountsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "Reads a list of card accounts", nickname = "getCardAccount", notes = "Reads a list of card accounts with additional information, e.g. balance information.  It is assumed that a consent of the PSU to this access is already given and stored on the ASPSP system.  The addressed list of card accounts depends then on the PSU ID and the stored consent addressed by consentId,  respectively the OAuth2 access token.  ", response = CardAccountList.class, authorizations = {
        @Authorization(value = "BearerAuthOAuth")
    }, tags={ "Account Information Service (AIS)", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = CardAccountList.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400NGAIS.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error401NGAIS.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403NGAIS.class),
        @ApiResponse(code = 404, message = "Not found", response = Error404NGAIS.class),
        @ApiResponse(code = 405, message = "Method Not Allowed", response = Error405NGAIS.class),
        @ApiResponse(code = 406, message = "Not Acceptable", response = Error406NGAIS.class),
        @ApiResponse(code = 408, message = "Request Timeout"),
        @ApiResponse(code = 415, message = "Unsupported Media Type"),
        @ApiResponse(code = 429, message = "Too Many Requests", response = Error429NGAIS.class),
        @ApiResponse(code = 500, message = "Internal Server Error"),
        @ApiResponse(code = 503, message = "Service Unavailable") })
    @RequestMapping(value = "/card-accounts",
        produces = { "application/json", "application/problem+json",  }, 
        method = RequestMethod.GET)
    default ResponseEntity<CardAccountList> getCardAccount(@ApiParam(value = "ID of the request, unique to the call, as determined by the initiating party." ,required=true) @RequestHeader(value="X-Request-ID", required=true) UUID xRequestID,@ApiParam(value = "This then contains the consentId of the related AIS consent, which was performed prior to this payment initiation. " ,required=true, defaultValue="null") @RequestHeader(value="Consent-ID", required=true) String consentID,@ApiParam(value = "Is contained if and only if the \"Signature\" element is contained in the header of the request." ) @RequestHeader(value="Digest", required=false) String digest,@ApiParam(value = "A signature of the request by the TPP on application level. This might be mandated by ASPSP. " ) @RequestHeader(value="Signature", required=false) String signature,@ApiParam(value = "The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. " ) @RequestHeader(value="TPP-Signature-Certificate", required=false) byte[] tpPSignatureCertificate,@ApiParam(value = "The forwarded IP Address header field consists of the corresponding HTTP request  IP Address field between PSU and TPP.  It shall be contained if and only if this request was actively initiated by the PSU. " ) @RequestHeader(value="PSU-IP-Address", required=false) String psUIPAddress,@ApiParam(value = "The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. " ) @RequestHeader(value="PSU-IP-Port", required=false) String psUIPPort,@ApiParam(value = "The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. " ) @RequestHeader(value="PSU-Accept", required=false) String psUAccept,@ApiParam(value = "The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. " ) @RequestHeader(value="PSU-Accept-Charset", required=false) String psUAcceptCharset,@ApiParam(value = "The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. " ) @RequestHeader(value="PSU-Accept-Encoding", required=false) String psUAcceptEncoding,@ApiParam(value = "The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. " ) @RequestHeader(value="PSU-Accept-Language", required=false) String psUAcceptLanguage,@ApiParam(value = "The forwarded Agent header field of the HTTP request between PSU and TPP, if available. " ) @RequestHeader(value="PSU-User-Agent", required=false) String psUUserAgent,@ApiParam(value = "HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE " , allowableValues="GET, POST, PUT, PATCH, DELETE") @RequestHeader(value="PSU-Http-Method", required=false) String psUHttpMethod,@ApiParam(value = "UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID need to be unaltered until removal from device. " ) @RequestHeader(value="PSU-Device-ID", required=false) UUID psUDeviceID,@ApiParam(value = "The forwarded Geo Location of the corresponding http request between PSU and TPP if available. " ) @RequestHeader(value="PSU-Geo-Location", required=false) String psUGeoLocation) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"cardAccounts\" : [ {    \"resourceId\" : \"resourceId\",    \"product\" : \"product\",    \"balances\" : [ {      \"lastChangeDateTime\" : \"2000-01-23T04:56:07.000+00:00\",      \"lastCommittedTransaction\" : \"lastCommittedTransaction\",      \"balanceAmount\" : {        \"currency\" : \"EUR\",        \"amount\" : \"123\"      },      \"referenceDate\" : \"2000-01-23\"    }, {      \"lastChangeDateTime\" : \"2000-01-23T04:56:07.000+00:00\",      \"lastCommittedTransaction\" : \"lastCommittedTransaction\",      \"balanceAmount\" : {        \"currency\" : \"EUR\",        \"amount\" : \"123\"      },      \"referenceDate\" : \"2000-01-23\"    } ],    \"maskedPan\" : \"123456xxxxxx1234\",    \"_links\" : {      \"balances\" : \"/v1/payments/sepa-credit-transfers/1234-wertiq-983\",      \"transactions\" : \"/v1/payments/sepa-credit-transfers/1234-wertiq-983\"    },    \"usage\" : \"PRIV\",    \"name\" : \"name\",    \"creditLimit\" : {      \"currency\" : \"EUR\",      \"amount\" : \"123\"    },    \"currency\" : \"EUR\",    \"details\" : \"details\"  }, {    \"resourceId\" : \"resourceId\",    \"product\" : \"product\",    \"balances\" : [ {      \"lastChangeDateTime\" : \"2000-01-23T04:56:07.000+00:00\",      \"lastCommittedTransaction\" : \"lastCommittedTransaction\",      \"balanceAmount\" : {        \"currency\" : \"EUR\",        \"amount\" : \"123\"      },      \"referenceDate\" : \"2000-01-23\"    }, {      \"lastChangeDateTime\" : \"2000-01-23T04:56:07.000+00:00\",      \"lastCommittedTransaction\" : \"lastCommittedTransaction\",      \"balanceAmount\" : {        \"currency\" : \"EUR\",        \"amount\" : \"123\"      },      \"referenceDate\" : \"2000-01-23\"    } ],    \"maskedPan\" : \"123456xxxxxx1234\",    \"_links\" : {      \"balances\" : \"/v1/payments/sepa-credit-transfers/1234-wertiq-983\",      \"transactions\" : \"/v1/payments/sepa-credit-transfers/1234-wertiq-983\"    },    \"usage\" : \"PRIV\",    \"name\" : \"name\",    \"creditLimit\" : {      \"currency\" : \"EUR\",      \"amount\" : \"123\"    },    \"currency\" : \"EUR\",    \"details\" : \"details\"  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Read card account balances", nickname = "getCardAccountBalances", notes = "Reads balance data from a given card account addressed by  \"account-id\".   Remark: This account-id can be a tokenised identification due  to data protection reason since the path information might be  logged on intermediary servers within the ASPSP sphere.  This account-id then can be retrieved by the  \"GET Card Account List\" call ", response = ReadCardAccountBalanceResponse200.class, authorizations = {
        @Authorization(value = "BearerAuthOAuth")
    }, tags={ "Account Information Service (AIS)", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ReadCardAccountBalanceResponse200.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400NGAIS.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error401NGAIS.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403NGAIS.class),
        @ApiResponse(code = 404, message = "Not found", response = Error404NGAIS.class),
        @ApiResponse(code = 405, message = "Method Not Allowed", response = Error405NGAIS.class),
        @ApiResponse(code = 406, message = "Not Acceptable", response = Error406NGAIS.class),
        @ApiResponse(code = 408, message = "Request Timeout"),
        @ApiResponse(code = 415, message = "Unsupported Media Type"),
        @ApiResponse(code = 429, message = "Too Many Requests", response = Error429NGAIS.class),
        @ApiResponse(code = 500, message = "Internal Server Error"),
        @ApiResponse(code = 503, message = "Service Unavailable") })
    @RequestMapping(value = "/card-accounts/{account-id}/balances",
        produces = { "application/json", "application/problem+json",  }, 
        method = RequestMethod.GET)
    default ResponseEntity<ReadCardAccountBalanceResponse200> getCardAccountBalances(@ApiParam(value = "This identification is denoting the addressed account.  The account-id is retrieved by using a \"Read Account List\" call.  The account-id is the \"id\" attribute of the account structure.  Its value is constant at least throughout the lifecycle of a given consent. ",required=true, defaultValue="null") @PathVariable("account-id") String accountId,@ApiParam(value = "ID of the request, unique to the call, as determined by the initiating party." ,required=true) @RequestHeader(value="X-Request-ID", required=true) UUID xRequestID,@ApiParam(value = "This then contains the consentId of the related AIS consent, which was performed prior to this payment initiation. " ,required=true, defaultValue="null") @RequestHeader(value="Consent-ID", required=true) String consentID,@ApiParam(value = "Is contained if and only if the \"Signature\" element is contained in the header of the request." ) @RequestHeader(value="Digest", required=false) String digest,@ApiParam(value = "A signature of the request by the TPP on application level. This might be mandated by ASPSP. " ) @RequestHeader(value="Signature", required=false) String signature,@ApiParam(value = "The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. " ) @RequestHeader(value="TPP-Signature-Certificate", required=false) byte[] tpPSignatureCertificate,@ApiParam(value = "The forwarded IP Address header field consists of the corresponding HTTP request  IP Address field between PSU and TPP.  It shall be contained if and only if this request was actively initiated by the PSU. " ) @RequestHeader(value="PSU-IP-Address", required=false) String psUIPAddress,@ApiParam(value = "The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. " ) @RequestHeader(value="PSU-IP-Port", required=false) String psUIPPort,@ApiParam(value = "The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. " ) @RequestHeader(value="PSU-Accept", required=false) String psUAccept,@ApiParam(value = "The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. " ) @RequestHeader(value="PSU-Accept-Charset", required=false) String psUAcceptCharset,@ApiParam(value = "The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. " ) @RequestHeader(value="PSU-Accept-Encoding", required=false) String psUAcceptEncoding,@ApiParam(value = "The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. " ) @RequestHeader(value="PSU-Accept-Language", required=false) String psUAcceptLanguage,@ApiParam(value = "The forwarded Agent header field of the HTTP request between PSU and TPP, if available. " ) @RequestHeader(value="PSU-User-Agent", required=false) String psUUserAgent,@ApiParam(value = "HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE " , allowableValues="GET, POST, PUT, PATCH, DELETE") @RequestHeader(value="PSU-Http-Method", required=false) String psUHttpMethod,@ApiParam(value = "UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID need to be unaltered until removal from device. " ) @RequestHeader(value="PSU-Device-ID", required=false) UUID psUDeviceID,@ApiParam(value = "The forwarded Geo Location of the corresponding http request between PSU and TPP if available. " ) @RequestHeader(value="PSU-Geo-Location", required=false) String psUGeoLocation) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"balances\" : [ {    \"lastChangeDateTime\" : \"2000-01-23T04:56:07.000+00:00\",    \"lastCommittedTransaction\" : \"lastCommittedTransaction\",    \"balanceAmount\" : {      \"currency\" : \"EUR\",      \"amount\" : \"123\"    },    \"referenceDate\" : \"2000-01-23\"  }, {    \"lastChangeDateTime\" : \"2000-01-23T04:56:07.000+00:00\",    \"lastCommittedTransaction\" : \"lastCommittedTransaction\",    \"balanceAmount\" : {      \"currency\" : \"EUR\",      \"amount\" : \"123\"    },    \"referenceDate\" : \"2000-01-23\"  } ],  \"cardAccount\" : {    \"bban\" : \"BARC12345612345678\",    \"maskedPan\" : \"123456xxxxxx1234\",    \"iban\" : \"FR7612345987650123456789014\",    \"currency\" : \"EUR\",    \"pan\" : \"5409050000000000\",    \"msisdn\" : \"+49 170 1234567\"  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Read transaction list of an account", nickname = "getCardAccountTransactionList", notes = "Reads account data from a given card account addressed by \"account-id\". ", response = CardAccountsTransactionsResponse200.class, authorizations = {
        @Authorization(value = "BearerAuthOAuth")
    }, tags={ "Account Information Service (AIS)", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = CardAccountsTransactionsResponse200.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400NGAIS.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error401NGAIS.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403NGAIS.class),
        @ApiResponse(code = 404, message = "Not found", response = Error404NGAIS.class),
        @ApiResponse(code = 405, message = "Method Not Allowed", response = Error405NGAIS.class),
        @ApiResponse(code = 406, message = "Not Acceptable", response = Error406NGAIS.class),
        @ApiResponse(code = 408, message = "Request Timeout"),
        @ApiResponse(code = 415, message = "Unsupported Media Type"),
        @ApiResponse(code = 429, message = "Too Many Requests", response = Error429NGAIS.class),
        @ApiResponse(code = 500, message = "Internal Server Error"),
        @ApiResponse(code = 503, message = "Service Unavailable") })
    @RequestMapping(value = "/card-accounts/{account-id}/transactions",
        produces = { "application/json", "application/problem+json",  }, 
        method = RequestMethod.GET)
    default ResponseEntity<CardAccountsTransactionsResponse200> getCardAccountTransactionList(@ApiParam(value = "This identification is denoting the addressed account.  The account-id is retrieved by using a \"Read Account List\" call.  The account-id is the \"id\" attribute of the account structure.  Its value is constant at least throughout the lifecycle of a given consent. ",required=true, defaultValue="null") @PathVariable("account-id") String accountId,@NotNull @ApiParam(value = "Permitted codes are    * \"booked\",   * \"pending\" and    * \"both\" \"booked\" shall be supported by the ASPSP. To support the \"pending\" and \"both\" feature is optional for the ASPSP,  Error code if not supported in the online banking frontend ", required = true, allowableValues = "booked, pending, both") @Valid @RequestParam(value = "bookingStatus", required = true) String bookingStatus,@ApiParam(value = "ID of the request, unique to the call, as determined by the initiating party." ,required=true) @RequestHeader(value="X-Request-ID", required=true) UUID xRequestID,@ApiParam(value = "This then contains the consentId of the related AIS consent, which was performed prior to this payment initiation. " ,required=true, defaultValue="null") @RequestHeader(value="Consent-ID", required=true) String consentID,@ApiParam(value = "Conditional: Starting date (inclusive the date dateFrom) of the transaction list, mandated if no delta access is required.  For booked transactions, the relevant date is the booking date.   For pending transactions, the relevant date is the entry date, which may not be transparent  neither in this API nor other channels of the ASPSP. ") @Valid @RequestParam(value = "dateFrom", required = false) LocalDate dateFrom,@ApiParam(value = "End date (inclusive the data dateTo) of the transaction list, default is \"now\" if not given.   Might be ignored if a delta function is used.  For booked transactions, the relevant date is the booking date.   For pending transactions, the relevant date is the entry date, which may not be transparent  neither in this API nor other channels of the ASPSP. ") @Valid @RequestParam(value = "dateTo", required = false) LocalDate dateTo,@ApiParam(value = "This data attribute is indicating that the AISP is in favour to get all transactions after  the transaction with identification entryReferenceFrom alternatively to the above defined period.  This is a implementation of a delta access.  If this data element is contained, the entries \"dateFrom\" and \"dateTo\" might be ignored by the ASPSP  if a delta report is supported.  Optional if supported by API provider. ") @Valid @RequestParam(value = "entryReferenceFrom", required = false) String entryReferenceFrom,@ApiParam(value = "This data attribute is indicating that the AISP is in favour to get all transactions after the last report access for this PSU on the addressed account. This is another implementation of a delta access-report. This delta indicator might be rejected by the ASPSP if this function is not supported. Optional if supported by API provider") @Valid @RequestParam(value = "deltaList", required = false) Boolean deltaList,@ApiParam(value = "If contained, this function reads the list of accessible payment accounts including the booking balance,  if granted by the PSU in the related consent and available by the ASPSP.  This parameter might be ignored by the ASPSP.  ") @Valid @RequestParam(value = "withBalance", required = false) Boolean withBalance,@ApiParam(value = "Is contained if and only if the \"Signature\" element is contained in the header of the request." ) @RequestHeader(value="Digest", required=false) String digest,@ApiParam(value = "A signature of the request by the TPP on application level. This might be mandated by ASPSP. " ) @RequestHeader(value="Signature", required=false) String signature,@ApiParam(value = "The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. " ) @RequestHeader(value="TPP-Signature-Certificate", required=false) byte[] tpPSignatureCertificate,@ApiParam(value = "The forwarded IP Address header field consists of the corresponding HTTP request  IP Address field between PSU and TPP.  It shall be contained if and only if this request was actively initiated by the PSU. " ) @RequestHeader(value="PSU-IP-Address", required=false) String psUIPAddress,@ApiParam(value = "The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. " ) @RequestHeader(value="PSU-IP-Port", required=false) String psUIPPort,@ApiParam(value = "The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. " ) @RequestHeader(value="PSU-Accept", required=false) String psUAccept,@ApiParam(value = "The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. " ) @RequestHeader(value="PSU-Accept-Charset", required=false) String psUAcceptCharset,@ApiParam(value = "The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. " ) @RequestHeader(value="PSU-Accept-Encoding", required=false) String psUAcceptEncoding,@ApiParam(value = "The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. " ) @RequestHeader(value="PSU-Accept-Language", required=false) String psUAcceptLanguage,@ApiParam(value = "The forwarded Agent header field of the HTTP request between PSU and TPP, if available. " ) @RequestHeader(value="PSU-User-Agent", required=false) String psUUserAgent,@ApiParam(value = "HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE " , allowableValues="GET, POST, PUT, PATCH, DELETE") @RequestHeader(value="PSU-Http-Method", required=false) String psUHttpMethod,@ApiParam(value = "UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID need to be unaltered until removal from device. " ) @RequestHeader(value="PSU-Device-ID", required=false) UUID psUDeviceID,@ApiParam(value = "The forwarded Geo Location of the corresponding http request between PSU and TPP if available. " ) @RequestHeader(value="PSU-Geo-Location", required=false) String psUGeoLocation) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"balances\" : [ {    \"lastChangeDateTime\" : \"2000-01-23T04:56:07.000+00:00\",    \"lastCommittedTransaction\" : \"lastCommittedTransaction\",    \"balanceAmount\" : {      \"currency\" : \"EUR\",      \"amount\" : \"123\"    },    \"referenceDate\" : \"2000-01-23\"  }, {    \"lastChangeDateTime\" : \"2000-01-23T04:56:07.000+00:00\",    \"lastCommittedTransaction\" : \"lastCommittedTransaction\",    \"balanceAmount\" : {      \"currency\" : \"EUR\",      \"amount\" : \"123\"    },    \"referenceDate\" : \"2000-01-23\"  } ],  \"_links\" : {    \"download\" : \"/v1/payments/sepa-credit-transfers/1234-wertiq-983\"  },  \"cardTransactions\" : {    \"booked\" : [ {      \"cardAcceptorId\" : \"cardAcceptorId\",      \"transactionDetails\" : \"transactionDetails\",      \"maskedPAN\" : \"123456xxxxxx1234\",      \"invoiced\" : true,      \"cardAcceptorAddress\" : {        \"street\" : \"rue blue\",        \"buildingnNumber\" : \"89\",        \"city\" : \"Paris\",        \"postalCode\" : \"75000\",        \"country\" : \"FR\"      },      \"markupFee\" : {        \"currency\" : \"EUR\",        \"amount\" : \"123\"      },      \"terminalId\" : \"terminalId\",      \"transactionDate\" : \"2000-01-23\",      \"cardTransactionId\" : \"cardTransactionId\",      \"cardAcceptorCategoryCode\" : \"cardAcceptorCategoryCode\",      \"originalAmount\" : {        \"currency\" : \"EUR\",        \"amount\" : \"123\"      },      \"exchangeRate\" : [ {        \"targetCurrency\" : \"EUR\",        \"rate\" : \"rate\",        \"unitCurrency\" : \"unitCurrency\",        \"sourceCurrency\" : \"EUR\",        \"rateDate\" : \"2000-01-23\",        \"rateContract\" : \"rateContract\"      }, {        \"targetCurrency\" : \"EUR\",        \"rate\" : \"rate\",        \"unitCurrency\" : \"unitCurrency\",        \"sourceCurrency\" : \"EUR\",        \"rateDate\" : \"2000-01-23\",        \"rateContract\" : \"rateContract\"      } ],      \"transactionAmount\" : {        \"currency\" : \"EUR\",        \"amount\" : \"123\"      },      \"proprietaryBankTransactionCode\" : \"proprietaryBankTransactionCode\",      \"bookingDate\" : \"2000-01-23\",      \"markupFeePercentage\" : \"markupFeePercentage\"    }, {      \"cardAcceptorId\" : \"cardAcceptorId\",      \"transactionDetails\" : \"transactionDetails\",      \"maskedPAN\" : \"123456xxxxxx1234\",      \"invoiced\" : true,      \"cardAcceptorAddress\" : {        \"street\" : \"rue blue\",        \"buildingnNumber\" : \"89\",        \"city\" : \"Paris\",        \"postalCode\" : \"75000\",        \"country\" : \"FR\"      },      \"markupFee\" : {        \"currency\" : \"EUR\",        \"amount\" : \"123\"      },      \"terminalId\" : \"terminalId\",      \"transactionDate\" : \"2000-01-23\",      \"cardTransactionId\" : \"cardTransactionId\",      \"cardAcceptorCategoryCode\" : \"cardAcceptorCategoryCode\",      \"originalAmount\" : {        \"currency\" : \"EUR\",        \"amount\" : \"123\"      },      \"exchangeRate\" : [ {        \"targetCurrency\" : \"EUR\",        \"rate\" : \"rate\",        \"unitCurrency\" : \"unitCurrency\",        \"sourceCurrency\" : \"EUR\",        \"rateDate\" : \"2000-01-23\",        \"rateContract\" : \"rateContract\"      }, {        \"targetCurrency\" : \"EUR\",        \"rate\" : \"rate\",        \"unitCurrency\" : \"unitCurrency\",        \"sourceCurrency\" : \"EUR\",        \"rateDate\" : \"2000-01-23\",        \"rateContract\" : \"rateContract\"      } ],      \"transactionAmount\" : {        \"currency\" : \"EUR\",        \"amount\" : \"123\"      },      \"proprietaryBankTransactionCode\" : \"proprietaryBankTransactionCode\",      \"bookingDate\" : \"2000-01-23\",      \"markupFeePercentage\" : \"markupFeePercentage\"    } ],    \"_links\" : {      \"next\" : \"/v1/payments/sepa-credit-transfers/1234-wertiq-983\",      \"previous\" : \"/v1/payments/sepa-credit-transfers/1234-wertiq-983\",      \"last\" : \"/v1/payments/sepa-credit-transfers/1234-wertiq-983\",      \"cardAccount\" : \"/v1/payments/sepa-credit-transfers/1234-wertiq-983\",      \"first\" : \"/v1/payments/sepa-credit-transfers/1234-wertiq-983\"    },    \"pending\" : [ {      \"cardAcceptorId\" : \"cardAcceptorId\",      \"transactionDetails\" : \"transactionDetails\",      \"maskedPAN\" : \"123456xxxxxx1234\",      \"invoiced\" : true,      \"cardAcceptorAddress\" : {        \"street\" : \"rue blue\",        \"buildingnNumber\" : \"89\",        \"city\" : \"Paris\",        \"postalCode\" : \"75000\",        \"country\" : \"FR\"      },      \"markupFee\" : {        \"currency\" : \"EUR\",        \"amount\" : \"123\"      },      \"terminalId\" : \"terminalId\",      \"transactionDate\" : \"2000-01-23\",      \"cardTransactionId\" : \"cardTransactionId\",      \"cardAcceptorCategoryCode\" : \"cardAcceptorCategoryCode\",      \"originalAmount\" : {        \"currency\" : \"EUR\",        \"amount\" : \"123\"      },      \"exchangeRate\" : [ {        \"targetCurrency\" : \"EUR\",        \"rate\" : \"rate\",        \"unitCurrency\" : \"unitCurrency\",        \"sourceCurrency\" : \"EUR\",        \"rateDate\" : \"2000-01-23\",        \"rateContract\" : \"rateContract\"      }, {        \"targetCurrency\" : \"EUR\",        \"rate\" : \"rate\",        \"unitCurrency\" : \"unitCurrency\",        \"sourceCurrency\" : \"EUR\",        \"rateDate\" : \"2000-01-23\",        \"rateContract\" : \"rateContract\"      } ],      \"transactionAmount\" : {        \"currency\" : \"EUR\",        \"amount\" : \"123\"      },      \"proprietaryBankTransactionCode\" : \"proprietaryBankTransactionCode\",      \"bookingDate\" : \"2000-01-23\",      \"markupFeePercentage\" : \"markupFeePercentage\"    }, {      \"cardAcceptorId\" : \"cardAcceptorId\",      \"transactionDetails\" : \"transactionDetails\",      \"maskedPAN\" : \"123456xxxxxx1234\",      \"invoiced\" : true,      \"cardAcceptorAddress\" : {        \"street\" : \"rue blue\",        \"buildingnNumber\" : \"89\",        \"city\" : \"Paris\",        \"postalCode\" : \"75000\",        \"country\" : \"FR\"      },      \"markupFee\" : {        \"currency\" : \"EUR\",        \"amount\" : \"123\"      },      \"terminalId\" : \"terminalId\",      \"transactionDate\" : \"2000-01-23\",      \"cardTransactionId\" : \"cardTransactionId\",      \"cardAcceptorCategoryCode\" : \"cardAcceptorCategoryCode\",      \"originalAmount\" : {        \"currency\" : \"EUR\",        \"amount\" : \"123\"      },      \"exchangeRate\" : [ {        \"targetCurrency\" : \"EUR\",        \"rate\" : \"rate\",        \"unitCurrency\" : \"unitCurrency\",        \"sourceCurrency\" : \"EUR\",        \"rateDate\" : \"2000-01-23\",        \"rateContract\" : \"rateContract\"      }, {        \"targetCurrency\" : \"EUR\",        \"rate\" : \"rate\",        \"unitCurrency\" : \"unitCurrency\",        \"sourceCurrency\" : \"EUR\",        \"rateDate\" : \"2000-01-23\",        \"rateContract\" : \"rateContract\"      } ],      \"transactionAmount\" : {        \"currency\" : \"EUR\",        \"amount\" : \"123\"      },      \"proprietaryBankTransactionCode\" : \"proprietaryBankTransactionCode\",      \"bookingDate\" : \"2000-01-23\",      \"markupFeePercentage\" : \"markupFeePercentage\"    } ]  },  \"cardAccount\" : {    \"bban\" : \"BARC12345612345678\",    \"maskedPan\" : \"123456xxxxxx1234\",    \"iban\" : \"FR7612345987650123456789014\",    \"currency\" : \"EUR\",    \"pan\" : \"5409050000000000\",    \"msisdn\" : \"+49 170 1234567\"  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Reads details about a card account", nickname = "readCardAccount", notes = "Reads details about a card account.  It is assumed that a consent of the PSU to this access is already given  and stored on the ASPSP system. The addressed details of this account depends  then on the stored consent addressed by consentId, respectively the OAuth2  access token. ", response = CardAccountDetails.class, authorizations = {
        @Authorization(value = "BearerAuthOAuth")
    }, tags={ "Account Information Service (AIS)", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = CardAccountDetails.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error400NGAIS.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error401NGAIS.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error403NGAIS.class),
        @ApiResponse(code = 404, message = "Not found", response = Error404NGAIS.class),
        @ApiResponse(code = 405, message = "Method Not Allowed", response = Error405NGAIS.class),
        @ApiResponse(code = 406, message = "Not Acceptable", response = Error406NGAIS.class),
        @ApiResponse(code = 408, message = "Request Timeout"),
        @ApiResponse(code = 415, message = "Unsupported Media Type"),
        @ApiResponse(code = 429, message = "Too Many Requests", response = Error429NGAIS.class),
        @ApiResponse(code = 500, message = "Internal Server Error"),
        @ApiResponse(code = 503, message = "Service Unavailable") })
    @RequestMapping(value = "/card-accounts/{account-id}",
        produces = { "application/json", "application/problem+json",  }, 
        method = RequestMethod.GET)
    default ResponseEntity<CardAccountDetails> readCardAccount(@ApiParam(value = "This identification is denoting the addressed account.  The account-id is retrieved by using a \"Read Account List\" call.  The account-id is the \"id\" attribute of the account structure.  Its value is constant at least throughout the lifecycle of a given consent. ",required=true, defaultValue="null") @PathVariable("account-id") String accountId,@ApiParam(value = "ID of the request, unique to the call, as determined by the initiating party." ,required=true) @RequestHeader(value="X-Request-ID", required=true) UUID xRequestID,@ApiParam(value = "This then contains the consentId of the related AIS consent, which was performed prior to this payment initiation. " ,required=true, defaultValue="null") @RequestHeader(value="Consent-ID", required=true) String consentID,@ApiParam(value = "Is contained if and only if the \"Signature\" element is contained in the header of the request." ) @RequestHeader(value="Digest", required=false) String digest,@ApiParam(value = "A signature of the request by the TPP on application level. This might be mandated by ASPSP. " ) @RequestHeader(value="Signature", required=false) String signature,@ApiParam(value = "The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. " ) @RequestHeader(value="TPP-Signature-Certificate", required=false) byte[] tpPSignatureCertificate,@ApiParam(value = "The forwarded IP Address header field consists of the corresponding HTTP request  IP Address field between PSU and TPP.  It shall be contained if and only if this request was actively initiated by the PSU. " ) @RequestHeader(value="PSU-IP-Address", required=false) String psUIPAddress,@ApiParam(value = "The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. " ) @RequestHeader(value="PSU-IP-Port", required=false) String psUIPPort,@ApiParam(value = "The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. " ) @RequestHeader(value="PSU-Accept", required=false) String psUAccept,@ApiParam(value = "The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. " ) @RequestHeader(value="PSU-Accept-Charset", required=false) String psUAcceptCharset,@ApiParam(value = "The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. " ) @RequestHeader(value="PSU-Accept-Encoding", required=false) String psUAcceptEncoding,@ApiParam(value = "The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. " ) @RequestHeader(value="PSU-Accept-Language", required=false) String psUAcceptLanguage,@ApiParam(value = "The forwarded Agent header field of the HTTP request between PSU and TPP, if available. " ) @RequestHeader(value="PSU-User-Agent", required=false) String psUUserAgent,@ApiParam(value = "HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE " , allowableValues="GET, POST, PUT, PATCH, DELETE") @RequestHeader(value="PSU-Http-Method", required=false) String psUHttpMethod,@ApiParam(value = "UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID need to be unaltered until removal from device. " ) @RequestHeader(value="PSU-Device-ID", required=false) UUID psUDeviceID,@ApiParam(value = "The forwarded Geo Location of the corresponding http request between PSU and TPP if available. " ) @RequestHeader(value="PSU-Geo-Location", required=false) String psUGeoLocation) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"resourceId\" : \"resourceId\",  \"product\" : \"product\",  \"balances\" : [ {    \"lastChangeDateTime\" : \"2000-01-23T04:56:07.000+00:00\",    \"lastCommittedTransaction\" : \"lastCommittedTransaction\",    \"balanceAmount\" : {      \"currency\" : \"EUR\",      \"amount\" : \"123\"    },    \"referenceDate\" : \"2000-01-23\"  }, {    \"lastChangeDateTime\" : \"2000-01-23T04:56:07.000+00:00\",    \"lastCommittedTransaction\" : \"lastCommittedTransaction\",    \"balanceAmount\" : {      \"currency\" : \"EUR\",      \"amount\" : \"123\"    },    \"referenceDate\" : \"2000-01-23\"  } ],  \"maskedPan\" : \"123456xxxxxx1234\",  \"_links\" : {    \"balances\" : \"/v1/payments/sepa-credit-transfers/1234-wertiq-983\",    \"transactions\" : \"/v1/payments/sepa-credit-transfers/1234-wertiq-983\"  },  \"usage\" : \"PRIV\",  \"name\" : \"name\",  \"creditLimit\" : {    \"currency\" : \"EUR\",    \"amount\" : \"123\"  },  \"currency\" : \"EUR\",  \"details\" : \"details\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
